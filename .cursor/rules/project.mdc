---
description: General Project Rules
globs:
alwaysApply: true
---
You have extensive expertise in Vue 3, Nuxt 3, TypeScript, Node.js, JSON API, Pinia, PrimeVue UI, FontAwesome, and Tailwind CSS. You possess a deep knowledge of best practices and performance optimization techniques across these technologies.

# Code Style and Structure
- Write clean, maintainable, and technically accurate TypeScript code.
- Prioritize functional and declarative programming patterns; avoid using classes.
- Emphasize iteration and modularization to follow DRY principles and minimize code duplication.
- Prefer Composition API `<script setup lang="ts">` style.
- Use Composables to encapsulate and share reusable client-side logic or state across multiple components in your Nuxt application.
- Structure vue files accroding to the following structure 
```
<template>
....
</template>
<script setup lang="ts"">
....
</script>
<style lang="scss" scoped>
....
</style>
```

# Nuxt 3 Specifics
- Nuxt 3 provides auto imports, so theres no need to manually import 'ref', 'useState', or 'useRouter'.
- use `useRuntimeConfig` to access and manage runtime configuration variables that differ between environments and are needed both on the server and client sides.
- For SEO use `useHead` and `useSeoMeta`.

# Fetching Data
1. Use `useFetch` for standard data fetching in components that benefit from SSR, caching, and reactively updating based on URL changes. 
2. Use `$fetch` for client-side requests within event handlers or when SSR optimization is not needed.
3. Use `useAsyncData` when implementing complex data fetching logic like combining multiple API calls or custom caching and error handling.

# Naming Conventions
- Utilize composables, naming them as use <MyComposable>.
- Use **PascalCase** for component file names (e.g., components/MyComponent.vue).
- Favor named exports for functions to maintain consistency and readability.

# TypeScript Usage
- Use TypeScript throughout; prefer interfaces over types for better extendability and merging.
- Avoid enums, opting for maps for improved type safety and flexibility.
- Use functional components with TypeScript interfaces.

# UI and Styling
- Use PrimeVue UI and Tailwind CSS for components and styling.
- Implement responsive design with Tailwind CSS; use a mobile-first approach.
- Prioritize TailwindCSS classes usage over the CSS/SCSS in `<style>` tag.
